import {
  Engine,
  EngineStore,
  Observable,
  Scene,
  Tools,
  __assign,
  __esm,
  init_engine,
  init_engineStore,
  init_observable,
  init_scene,
  init_tools,
  init_tslib_es6
} from "./chunk-VALTYTUV.js";

// node_modules/@babylonjs/core/Debug/debugLayer.js
var DebugLayerTab, DebugLayer;
var init_debugLayer = __esm({
  "node_modules/@babylonjs/core/Debug/debugLayer.js"() {
    init_tslib_es6();
    init_tools();
    init_observable();
    init_scene();
    init_engine();
    init_engineStore();
    Object.defineProperty(Scene.prototype, "debugLayer", {
      get: function() {
        if (!this._debugLayer) {
          this._debugLayer = new DebugLayer(this);
        }
        return this._debugLayer;
      },
      enumerable: true,
      configurable: true
    });
    (function(DebugLayerTab2) {
      DebugLayerTab2[DebugLayerTab2["Properties"] = 0] = "Properties";
      DebugLayerTab2[DebugLayerTab2["Debug"] = 1] = "Debug";
      DebugLayerTab2[DebugLayerTab2["Statistics"] = 2] = "Statistics";
      DebugLayerTab2[DebugLayerTab2["Tools"] = 3] = "Tools";
      DebugLayerTab2[DebugLayerTab2["Settings"] = 4] = "Settings";
    })(DebugLayerTab || (DebugLayerTab = {}));
    DebugLayer = function() {
      function DebugLayer2(scene) {
        var _this = this;
        this.BJSINSPECTOR = this._getGlobalInspector();
        this._scene = scene || EngineStore.LastCreatedScene;
        if (!this._scene) {
          return;
        }
        this._scene.onDisposeObservable.add(function() {
          if (_this._scene._debugLayer) {
            _this._scene._debugLayer.hide();
          }
        });
      }
      Object.defineProperty(DebugLayer2.prototype, "onPropertyChangedObservable", {
        get: function() {
          if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {
            return this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable;
          }
          if (!this._onPropertyChangedObservable) {
            this._onPropertyChangedObservable = new Observable();
          }
          return this._onPropertyChangedObservable;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(DebugLayer2.prototype, "onSelectionChangedObservable", {
        get: function() {
          if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {
            return this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable;
          }
          if (!this._onSelectionChangedObservable) {
            this._onSelectionChangedObservable = new Observable();
          }
          return this._onSelectionChangedObservable;
        },
        enumerable: false,
        configurable: true
      });
      DebugLayer2.prototype._createInspector = function(config) {
        if (this.isVisible()) {
          return;
        }
        if (this._onPropertyChangedObservable) {
          for (var _i = 0, _a = this._onPropertyChangedObservable.observers; _i < _a.length; _i++) {
            var observer = _a[_i];
            this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable.add(observer);
          }
          this._onPropertyChangedObservable.clear();
          this._onPropertyChangedObservable = void 0;
        }
        if (this._onSelectionChangedObservable) {
          for (var _b = 0, _c = this._onSelectionChangedObservable.observers; _b < _c.length; _b++) {
            var observer = _c[_b];
            this.BJSINSPECTOR.Inspector.OnSelectionChangedObservable.add(observer);
          }
          this._onSelectionChangedObservable.clear();
          this._onSelectionChangedObservable = void 0;
        }
        var userOptions = __assign({ overlay: false, showExplorer: true, showInspector: true, embedMode: false, handleResize: true, enablePopup: true }, config);
        this.BJSINSPECTOR = this.BJSINSPECTOR || this._getGlobalInspector();
        this.BJSINSPECTOR.Inspector.Show(this._scene, userOptions);
      };
      DebugLayer2.prototype.select = function(entity, lineContainerTitles) {
        if (this.BJSINSPECTOR) {
          if (lineContainerTitles) {
            if (Object.prototype.toString.call(lineContainerTitles) == "[object String]") {
              this.BJSINSPECTOR.Inspector.MarkLineContainerTitleForHighlighting(lineContainerTitles);
            } else {
              this.BJSINSPECTOR.Inspector.MarkMultipleLineContainerTitlesForHighlighting(lineContainerTitles);
            }
          }
          this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable.notifyObservers(entity);
        }
      };
      DebugLayer2.prototype._getGlobalInspector = function() {
        if (typeof INSPECTOR !== "undefined") {
          return INSPECTOR;
        }
        if (typeof BABYLON !== "undefined" && typeof BABYLON.Inspector !== "undefined") {
          return BABYLON;
        }
        return void 0;
      };
      DebugLayer2.prototype.isVisible = function() {
        return this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector.IsVisible;
      };
      DebugLayer2.prototype.hide = function() {
        if (this.BJSINSPECTOR) {
          this.BJSINSPECTOR.Inspector.Hide();
        }
      };
      DebugLayer2.prototype.setAsActiveScene = function() {
        if (this.BJSINSPECTOR) {
          this.BJSINSPECTOR.Inspector._SetNewScene(this._scene);
        }
      };
      DebugLayer2.prototype.show = function(config) {
        var _this = this;
        return new Promise(function(resolve) {
          if (typeof _this.BJSINSPECTOR == "undefined") {
            var inspectorUrl = config && config.inspectorURL ? config.inspectorURL : DebugLayer2.InspectorURL;
            Tools.LoadScript(inspectorUrl, function() {
              _this._createInspector(config);
              resolve(_this);
            });
          } else {
            _this._createInspector(config);
            resolve(_this);
          }
        });
      };
      DebugLayer2.InspectorURL = "https://unpkg.com/babylonjs-inspector@".concat(Engine.Version, "/babylon.inspector.bundle.js");
      return DebugLayer2;
    }();
  }
});

export {
  DebugLayerTab,
  DebugLayer,
  init_debugLayer
};
//# sourceMappingURL=chunk-DGEIFUUL.js.map
